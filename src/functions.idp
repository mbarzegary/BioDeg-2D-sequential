// basic functions used all over the code

IFMACRO(!idpFunctions)
macro idpFunctions 1 // prevent multiple include statements

macro grad(f) [dx(f), dy(f)] //eom
macro div(u) (dx(u#x) + dy(u#y))//
macro Grad(u) [grad(u#x), grad(u#y)]//

// a set of different print helper macros
macro print(text)
{
	cout << text << endl;
} //

macro printDivider
{
	cout << "=============================================================" << endl;
} //

// I don't know why, but a macro ignores backslashes, so I had to define this as a fucntion
func int printHeader()
{
	cout<<"+-----------------------------------------------------------+\n";
	cout<<"|         ____    _           _____                         |\n";
	cout<<"|        |  _ \\  (_)         |  __ \\                        |\n";
	cout<<"|        | |_) |  _    ___   | |  | |   ___    __ _         |\n";
	cout<<"|        |  _ <  | |  / _ \\  | |  | |  / _ \\  / _` |        |\n";
	cout<<"|        | |_) | | | | (_) | | |__| | |  __/ | (_| |        |\n";
	cout<<"|        |____/  |_|  \\___/  |_____/   \\___|  \\__, |        |\n";
	cout<<"|                                              __/ |        |\n";
	cout<<"|                                             |___/         |\n";
	cout<<"|                                                           |\n";
	cout<<"|              KU Leuven  &  University of Liege            |\n";
	cout<<"|                                                           |\n";
	cout<<"|           +------> 2D Sequential Version <------+         |\n";
	cout<<"|                                                           |\n";
	cout<<"+-----------------------------------------------------------+\n";
	return 0;
}

// function to define the shape of the scaffold if we want to generate it instead of
// importing it from a mesh file
func box = (x > 2) * (x < 8) * (y > 1.5) * (y < 2.5);
func circle = sqrt((x-L/2)^2 + (y-L/2)^2) <= 2;

macro setCPUTime
{
	cpuTime = clock();
} //

macro printElapsedTime
{
	print("Solved in " + (clock() - cpuTime) + " s")
} //

ENDIFMACRO
