// defining the geometry of the scaffold and constructing the mesh

IFMACRO(!idpGeometry)
macro idpGeometry 1 // prevent multiple include statements

// Create initial mesh
mesh Mesh; // main mesh file, will be partitioned with overlapping techniques

{
  border b1(t=0., 1.){x=L*t; y=0.; label=1;};
  border b2(t=0., 1.){x=L; y=W*t; label=1;};
  border b3(t=0., 1.){x=L-L*t; y=W; label=1;};
  border b4(t=0., 1.){x=0.; y=W-W*t; label=1;};

  Mesh = buildmesh(b1(meshSize) + b2(meshSize) + b3(meshSize) + b4(meshSize));
}

// creating Finite element spaces
fespace SpaceP1(Mesh, P1); // used for all the dependent variables and distance funtion
fespace SpaceP0(Mesh, P0); // used to calculate the available scaffold volume

SpaceP1 phi = 0; // main distance function, positive inside and negative outside of the scaffold
SpaceP1 phiTemp; // temporary variable for redistancing distance function

// initilize distance function based on the geometry
phi = box - 0.5;

Mesh = adaptmesh(Mesh, phi, err=meshError, iso=1, ratio=1.2, nbvx=7500000, hmin=meshMin, hmax=meshMax);
phi = phi;

// print mesh and problem dimentions
printDivider;
print("Finite Element DOF: " + SpaceP1.ndof);
print("Number of Elements: " + Mesh.nt);

// redistancing is mandatory at the beginning
distance(Mesh, phi, phiTemp[]);
phi = phiTemp;

ENDIFMACRO
